  {
        chartData.loading ? <span className="loading loading-bars text-white loading-lg"></span>
          :
        

            <div className={'p-0  m-0 lg:w-[100%] lg:h-[100%] max-lg:w-[100%] max-lg:h-[100%] md:w-[100%] max-md:h-[100%] sm:h-[100%] max-sm:h-[100%] '}>
              
            <div ref={chart_ref} ></div>

              {/* {props.graph === 'PLOTLY' ?

                <Plot
                  className={'p-0  m-0 lg:w-[100%] lg:h-[100%] max-lg:w-[100%] max-lg:h-[100%] md:w-[100%] '}
                  data={[
                    {
                      x: date,


                      open: open_data,
                      close: close_data,
                      high: high_data,
                      low: low_data,
                      type: 'candlestick',
                      mode: 'lines',

                      // marker: { color: 'white' },
                      increasing: { line: { color: '#1654B0' } },
                      decreasing: { line: { color: '#BD0C0C' } },
                      // name: 'AAPL'

                    },

                    {
                      x: date,


                      y: high_data,
                      mode: 'lines',
                      // type: 'scatter',
                      // name: 'Scatter',
                      // marker: { color: 'grey' },
                      // increasing: { line: { color: 'yellow' } },
                      // decreasing: { line: { color: 'red' } },
                      // name: 'AAPL Low',

                    },

                  ]}
                  layout={{
                    title: '',
                    plot_bgcolor: 'rgba(0,0,0,0)',
                    paper_bgcolor: '#0B1215',

                    // dragmode: 'zoom', // Enable zooming without range slider
                    xaxis: {
                      rangeslider: { visible: false } // Disable range slider
                    },
                    dragmode: 'pan',
                    margin: {
                      r: 0,
                      t: 0,
                      b: 40,
                      l: 60
                    },
                    showlegend: false,
                    modebar: {
                      orientation: 'v'
                    }
                  }} />

                : */}
              {/* <ApexCharts series={chart_Data.series} options={chart_Data.options} type='candlestick' width={'100%'} height={500} className={'p-1  m-0 lg:w-[100%] lg:h-[100%] max-lg:w-[100%] max-lg:h-[100%] md:w-[100%] max-md:h-[100%] sm:h-[100%] max-sm:h-[100%] max-sm:w-[100%] '} /> */}


              {/* } */}

             

            </div>
        

      }









 // useEffect(() => {

  //     // CANDLE STICKS
  //   const chartOptions1 = {
  //     layout: { textColor: 'white', background: { type: 'solid', color: 'transparent' } },
  //     width: chart_ref1.current.clientWidth, height: chartContainerRef.current.clientHeight / 2
  //   };


  //   const chart = createChart(chart_ref1.current, chartOptions1);
  //   chart.timeScale().fitContent();
  //   const candlestickSeries = chart.addCandlestickSeries({
  //     upColor: '#26a69a', downColor: '#ef5350',
  //     borderVisible: true, wickUpColor: '#26a69a',
  //     wickDownColor: '#ef5350'
  //   });
  //   const handleResize = () => {
  //     chart.applyOptions({
  //       width: chart_ref1.current.clientWidth, height: chartContainerRef.current.clientHeight / 2,
  //       localization: {
  //         priceFormatter: myPriceFormatter,
  //       },

  //     })
  //   };

  //   candlestickSeries.setData(all_data.chart_data);

  //   window.addEventListener('resize', handleResize);


  //   return () => {
  //     window.addEventListener('resize', handleResize)
  //     chart.remove()
  //   };
  //   // IndicatorData();
  //   // dispatch(ChartAction.setQuery({ loading: true }));
  //   // fetchChartData(null,dispatch);
  //   // getFilterQueryData();



  //   // // Sample adx data
  //   // const adxSeries = chart.addLineSeries({ color: 'yellow' });

  //   // adxSeries.setData(all_data.adx_data);
 




  // }, [chartData.loading])






  //    // Sample Indicator data
  // useEffect(()=>{

  //    // Sample apo data
  //   const chartOptions2 = {
  //     layout: { textColor: 'white', background: { type: 'solid', color: 'transparent' } },
  //     width: chart_ref2.current.clientWidth, height: chartContainerRef.current.clientHeight / 2
  //   };

  //   const apo_chart = createChart(chart_ref2.current, chartOptions2);
  //   apo_chart.timeScale().fitContent();

  //   const apoSeries = apo_chart.addLineSeries({ color: 'green' });

  //   const handleResize = () => {
  //     apo_chart.applyOptions({
  //       width: chart_ref2.current.clientWidth, height: chartContainerRef.current.clientHeight / 2,
  //       localization: {
  //         priceFormatter: myPriceFormatter,
  //       },

  //     })
  //   };

  //   apoSeries.setData(all_data.apo_data);

  //   return () => {
  //     window.addEventListener('resize', handleResize)
  //     apo_chart.remove()
  //   };

  // }, [chartData.loading,chartData.indicator_load])















// Lightweight Chartsâ„¢ Example: Realtime updates
// https://tradingview.github.io/lightweight-charts/tutorials/demos/realtime-updates


let randomFactor = 25 + Math.random() * 25;
const samplePoint = i =>
    i *
        (0.5 +
            Math.sin(i / 1) * 0.2 +
            Math.sin(i / 2) * 0.4 +
            Math.sin(i / randomFactor) * 0.8 +
            Math.sin(i / 50) * 0.5) +
    200 +
    i * 2;



const chartOptions = {
    layout: {
        textColor: 'black',
        background: { type: 'solid', color: 'white' },
    },
    height: 200,
};
const container = document.getElementById('container');
/** @type {import('lightweight-charts').IChartApi} */
const chart = createChart(container, chartOptions);

// Only needed within demo page
// eslint-disable-next-line no-undef
window.addEventListener('resize', () => {
    chart.applyOptions({ height: 200 });
});

const series = chart.addCandlestickSeries({
    upColor: '#26a69a',
    downColor: '#ef5350',
    borderVisible: false,
    wickUpColor: '#26a69a',
    wickDownColor: '#ef5350',
});

const data = generateData(2500, 20, 1000);

series.setData(data.initialData);
chart.timeScale().fitContent();
chart.timeScale().scrollToPosition(5);

// simulate real-time data
function* getNextRealtimeUpdate(realtimeData) {
    for (const dataPoint of realtimeData) {
        yield dataPoint;
    }
    return null;
}
const streamingDataProvider = getNextRealtimeUpdate(data.realtimeUpdates);

const intervalID = setInterval(() => {
    const update = streamingDataProvider.next();
    if (update.done) {
        clearInterval(intervalID);
        return;
    }
    series.update(update.value);
}, 100);

const styles = `
    .buttons-container {
        display: flex;
        flex-direction: row;
        gap: 8px;
    }
    .buttons-container button {
        all: initial;
        font-family: -apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu,
            sans-serif;
        font-size: 16px;
        font-style: normal;
        font-weight: 510;
        line-height: 24px; /* 150% */
        letter-spacing: -0.32px;
        padding: 8px 24px;
        color: rgba(19, 23, 34, 1);
        background-color: rgba(240, 243, 250, 1);
        border-radius: 8px;
        cursor: pointer;
    }

    .buttons-container button:hover {
        background-color: rgba(224, 227, 235, 1);
    }

    .buttons-container button:active {
        background-color: rgba(209, 212, 220, 1);
    }
`;

const stylesElement = document.createElement('style');
stylesElement.innerHTML = styles;
container.appendChild(stylesElement);

const buttonsContainer = document.createElement('div');
buttonsContainer.classList.add('buttons-container');
const button = document.createElement('button');
button.innerText = 'Go to realtime';
button.addEventListener('click', () => chart.timeScale().scrollToRealTime());
buttonsContainer.appendChild(button);

container.appendChild(buttonsContainer);







custom_indicators_getter: function (PineJS) {
        return Promise.resolve([
          {
            name: 'Bar Colorer Demo',
            metainfo: {
              _metainfoVersion: 51,

              id: "BarColoring@tv-basicstudies-1",
              name: "BarColoring",
              description: "Bar Colorer Demo",
              shortDescription: "Bar Coloring",

              isCustomIndicator: true,
              is_price_study: true,

              format: {
                type: 'price',
                precision: 4,
              },

              defaults: {
                palettes: {
                  palette_0: {
                    // palette colors
                    // change it to the default colors that you prefer,
                    // but note that the user can change them in the Style tab
                    // of indicator properties
                    colors: [
                      { color: '#FFFF00' },
                      { color: '#0000FF' }
                    ]
                  }
                }
              },
              inputs: [],
              plots: [{
                id: 'plot_0',

                // plot type should be set to 'bar_colorer'
                type: 'bar_colorer',

                // this is the name of the palette that is defined
                // in 'palettes' and 'defaults.palettes' sections
                palette: 'palette_0'
              }],
              palettes: {
                palette_0: {
                  colors: [
                    { name: 'Color 0' },
                    { name: 'Color 1' }
                  ],

                  // the mapping between the values that
                  // are returned by the script and palette colors
                  valToIndex: {
                    100: 0,
                    200: 1
                  }
                }
              }
            },
            constructor: function () {
              this.init = function (context, input) {
                this._context = context;
                this._input = input;
                console.log('ADX OUTSIDE CHART ', this._context)

                // this._plot=this._context.new_plot()

              };
              this.main = function (context, input) {
                this._context = context;
                this._input = input;

                

                var valueForColor0 = 100;
                var valueForColor1 = 200;

                const currentBar=context.new_sym(this._context.symbol).close;
                const time=context.new_sym(this._context.symbol).time;


                const indicatorValue=adx_indicators.find(d=>d.time===time)

                if(indicatorValue){
                  this._context.new_var(PineJS.Std.close(indicatorValue.value))
                }else{
                  this._context.new_var(PineJS.Std.close(NaN))
                }


                // perform your calculations here and return one of the constants
                // that is specified as a key in 'valToIndex' mapping
                // var result =PineJS.Std.open(this._context)
                // console.log('INSIDE CHART',this._context)



                // return [result];
              }
            }
          },


        ]);
      },
              this.init = function (context, input) {
                this._context = context;
                this._input = input;
                console.log('ADX OUTSIDE CHART ', this._context)

                // this._plot=this._context.new_plot()

              };
              this.main = function (context, input) {
                this._context = context;
                this._input = input;

                

                var valueForColor0 = 100;
                var valueForColor1 = 200;

                const currentBar=context.new_sym(this._context.symbol).close;
                const time=context.new_sym(this._context.symbol).time;


                const indicatorValue=adx_indicators.find(d=>d.time===time)

                if(indicatorValue){
                  this._context.new_var(PineJS.Std.close(indicatorValue.value))
                }else{
                  this._context.new_var(PineJS.Std.close(NaN))
                }


                // perform your calculations here and return one of the constants
                // that is specified as a key in 'valToIndex' mapping
                // var result =PineJS.Std.open(this._context)
                // console.log('INSIDE CHART',this._context)



                // return [result];
              }
            













  // useEffect(() => {

  //   // CANDLE STICKS
  //   const chartOptions1 = {
  //     layout: { textColor: 'white', background: { type: 'solid', color: 'transparent' } },
  //     width: chart_ref1.current.clientWidth, height: chartContainerRef.current.clientHeight 
  //   };


  //   const chart = createChart(chart_ref1.current, chartOptions1);
  //   chart.timeScale().fitContent();
  //   const candlestickSeries = chart.addLineSeries({
  //     upColor: '#26a69a', downColor: '#ef5350',
  //     borderVisible: true, wickUpColor: '#26a69a',
  //     wickDownColor: '#ef5350'
  //   });
  //   const handleResize = () => {
  //     chart.applyOptions({
  //       width: chart_ref1.current.clientWidth, height: chartContainerRef.current.clientHeight,
  //       localization: {
  //         priceFormatter: myPriceFormatter,
  //       },

  //     })
  //   };

  //   console.log(selected_indicator)


  //   candlestickSeries.setData(all_data[selected_indicator]);

  //   window.addEventListener('resize', handleResize);


  //   return () => {
  //     window.addEventListener('resize', handleResize)
  //     chart.remove()
  //   };


  //   // IndicatorData();
  //   // dispatch(ChartAction.setQuery({ loading: true }));
  //   // fetchChartData(null,dispatch);
  //   // getFilterQueryData();



  //   // // Sample adx data
  //   // const adxSeries = chart.addLineSeries({ color: 'yellow' });

  //   // adxSeries.setData(all_data.adx_data);





  // }, [selected_indicator])









